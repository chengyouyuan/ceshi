<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.winhxd.b2c.pay.dao.AccountingDetailMapper">

  <insert id="insertAccountingDetail" useGeneratedKeys="true" keyProperty="id" parameterType="com.winhxd.b2c.common.domain.pay.model.AccountingDetail">
    insert into pay_accounting_detail (
      order_no, detail_type, detail_money, store_id, insert_time
    ) values (
      #{orderNo}, #{detailType}, #{detailMoney}, #{storeId}, now()
    )
  </insert>

  <resultMap id="VerifyDetailVOMap" type="com.winhxd.b2c.common.domain.pay.vo.VerifyDetailVO">
    <id column="id" property="id"></id>
    <result column="order_no" property="orderNo"></result>
    <result column="detail_type" property="detailType"></result>
    <result column="detail_money" property="detailMoney"></result>
    <result column="store_id" property="storeId"></result>
    <result column="recorded_time" property="recordedTime"></result>
    <result column="insert_time" property="insertTime"></result>
    <result column="third_party_verify_status" property="thirdPartyVerifyStatus"></result>
    <result column="third_party_verify_time" property="thirdPartyVerifyTime"></result>
    <result column="verify_status" property="verifyStatus"></result>
    <result column="verify_code" property="verifyCode"></result>
    <result column="verify_time" property="verifyTime"></result>
    <result column="operated_time" property="operatedTime"></result>
    <result column="operated_by" property="operatedBy"></result>
    <result column="operated_by_name" property="operatedByName"></result>
  </resultMap>

  <select id="selectAccountingDetailById" resultMap="VerifyDetailVOMap">
    select *
    from pay_accounting_detail d
    where id = #{id}
  </select>

  <select id="selectAccountingDetailListByOrderNo" resultMap="VerifyDetailVOMap">
    select *
    from pay_accounting_detail d
    where order_no = #{orderNo}
  </select>

  <select id="selectAccountingDetailListByVerifyCode" resultMap="VerifyDetailVOMap">
    select *
    from pay_accounting_detail d
    where verify_code = #{verifyCode}
  </select>

  <resultMap id="OrderVerifyMoneyVOMap" type="com.winhxd.b2c.common.domain.pay.vo.OrderVerifyMoneyVO">
    <id column="order_no" property="orderNo"></id>
    <result column="store_id" property="storeId"></result>
    <result column="payment_money" property="paymentMoney"></result>
    <result column="discount_money" property="discountMoney"></result>
  </resultMap>

  <select id="selectOrderVerifyMoneyListByVerifyCode" resultMap="OrderVerifyMoneyVOMap">
    select d.order_no, d.store_id,
    sum(case when d.detail_type = 1 or d.detail_type = 2 then d.detail_money else 0 end) as payment_money,
    sum(case when d.detail_type = 3 then d.detail_money else 0 end) as discount_money
    from pay_accounting_detail d
    where d.verify_code = #{verifyCode}
    group by d.order_no, d.store_id
  </select>

  <select id="selectThirdPartyNotVerifyOrderNoList" resultType="string">
    select d.order_no as orderNo
    from pay_accounting_detail d
    where d.order_complete_status = 1
    and d.third_party_verify_status = 0
    and d.verify_time &lt; date_format(now(), '%Y-%m-%d')
    group by d.order_no
  </select>

  <select id="selectAccountingDetailList" resultMap="VerifyDetailVOMap" parameterType="com.winhxd.b2c.common.domain.pay.condition.VerifyDetailListCondition">
    select *
    from pay_accounting_detail d
    where d.order_complete_status = 1
    <if test="verifyStatus != null">
      and d.verify_status = #{verifyStatus}
    </if>
    <if test="thirdPartyVerifyStatus != null">
      and d.third_party_verify_status = #{thirdPartyVerifyStatus}
    </if>
    <if test="detailType != null">
      and d.detail_type = #{detailType}
    </if>
    <if test="storeId != null">
      and d.store_id = #{storeId}
    </if>
    <if test="recordedDateStart != null">
      and d.recorded_time &gt;= date_format(#{recordedDateStart}, '%Y-%m-%d')
    </if>
    <if test="recordedDateEnd != null">
      and d.recorded_time &lt; date_add(date_format(#{recordedDateEnd}, '%Y-%m-%d'), interval 1 day)
    </if>
    <if test="verifyDateStart != null">
      and d.verify_time &gt;= date_format(#{verifyDateStart}, '%Y-%m-%d')
    </if>
    <if test="verifyDateEnd != null">
      and d.verify_time &lt; date_add(date_format(#{verifyDateEnd}, '%Y-%m-%d'), interval 1 day)
    </if>
    order by d.recorded_time desc, d.order_no desc, d.detail_type asc
  </select>

  <resultMap id="VerifySummaryVOMap" type="com.winhxd.b2c.common.domain.pay.vo.VerifySummaryVO">
    <result column="store_id" property="storeId"></result>
    <result column="verify_status" property="verifyStatus"></result>
    <result column="last_recorded_time" property="lastRecordedTime"></result>
    <result column="operated_time" property="operatedTime"></result>
    <result column="operated_by_name" property="operatedByName"></result>
    <result column="real_pay" property="realPay"></result>
    <result column="third_party_fee" property="thirdPartyFee"></result>
    <result column="discount" property="discount"></result>
    <result column="real_verify" property="realVerify"></result>
  </resultMap>

  <select id="selectVerifyList" resultMap="VerifySummaryVOMap" parameterType="com.winhxd.b2c.common.domain.pay.condition.VerifySummaryListCondition">
    select
      d.store_id, d.verify_status,
      max(d.recorded_time) as last_recorded_time,
      h.operated_time, h.operated_by_name,
      sum(case when d.detail_type = 1 then d.detail_money else 0 end) as real_pay,
      sum(case when d.detail_type = 2 then d.detail_money else 0 end) as third_party_fee,
      sum(case when d.detail_type = 3 then d.detail_money else 0 end) as discount,
      sum(d.detail_money) as real_verify
    from pay_accounting_detail d
    left join pay_verify_history h on h.verify_code = d.verify_code
    where d.order_complete_status = 1
    and d.third_party_verify_status = 1
    and d.verify_status in (0, 1)
    <if test="verifyStatus != null">
      and d.verify_status = #{verifyStatus}
    </if>
    <if test="storeId != null">
      and d.store_id = #{storeId}
    </if>
    <if test="recordedDateStart != null">
      and d.recorded_time &gt;= date_format(#{recordedDateStart}, '%Y-%m-%d')
    </if>
    <if test="recordedDateEnd != null">
      and d.recorded_time &lt; date_add(date_format(#{recordedDateEnd}, '%Y-%m-%d'), interval 1 day)
    </if>
    <if test="verifyDateStart != null">
      and d.verify_time &gt;= date_format(#{verifyDateStart}, '%Y-%m-%d')
    </if>
    <if test="verifyDateEnd != null">
      and d.verify_time &lt; date_add(date_format(#{verifyDateEnd}, '%Y-%m-%d'), interval 1 day)
    </if>
    group by d.store_id, d.verify_status, h.verify_code, h.operated_time, h.operated_by_name
    having 1 = 1
    <if test="realPayMoneyStart != null">
      and sum(case when d.detail_type = 1 then d.detail_money else 0 end) &gt;= #{realPayMoneyStart}
    </if>
    <if test="realPayMoneyEnd != null">
      and sum(case when d.detail_type = 1 then d.detail_money else 0 end) &lt;= #{realPayMoneyEnd}
    </if>
    <if test="realVerifyMoneyStart != null">
      and sum(d.detail_money) &gt;= #{realVerifyMoneyStart}
    </if>
    <if test="realVerifyMoneyEnd != null">
      and sum(d.detail_money) &lt; #{realVerifyMoneyEnd}
    </if>
    order by h.operated_time desc
  </select>

  <update id="updateAccountingDetailCompletedByComplete">
    update pay_accounting_detail set
      order_complete_status = 1,
      recorded_time = #{recordedTime}
    where order_no = #{orderNo}
  </update>

  <update id="updateAccountingDetailServiceFeeByThirdParty">
    update pay_accounting_detail set
      detail_money = #{detailMoney}
    where detail_type = 2
    and order_no = #{orderNo}
  </update>

  <update id="updateAccountingDetailVerifiedByThirdParty">
    update pay_accounting_detail set
      third_party_verify_status = 1,
      third_party_verify_time = now()
    where third_party_verify_status = 0
    and order_no = #{orderNo}
  </update>

  <insert id="insertVerifyHistory" useGeneratedKeys="true" keyProperty="id">
    insert into pay_verify_history (
      verify_status, verify_code, verify_remark, operated_time, operated_by, operated_by_name
    ) values (
      #{verifyStatus}, #{verifyCode}, #{verifyRemark}, now(), #{operatedBy}, #{operatedByName}
    )
  </insert>

  <update id="updateAccountingDetailVerifyStatusBySummary">
    update pay_accounting_detail d, pay_verify_history h set
      d.verify_status = h.verify_status,
      d.verify_code = h.verify_code,
      d.verify_time = (case when h.verify_status = 1 then h.operated_time else null end),
      d.operated_time = h.operated_time,
      d.operated_by = h.operated_by,
      d.operated_by_name = h.operated_by_name
    where d.verify_status &lt;&gt; 1
    and d.third_party_verify_status = 1
    and d.order_complete_status = 1
    and h.verify_code = #{verifyCode}
    and d.store_id = #{storeId}
    and d.recorded_time &lt; date_add(date_format(#{dateBefore}, '%Y-%m-%d'), interval 1 day)
  </update>

  <update id="updateAccountingDetailVerifyStatusByDetailId">
    update pay_accounting_detail d, pay_verify_history h set
      d.verify_status = h.verify_status,
      d.verify_code = h.verify_code,
      d.verify_time = h.operated_time,
      d.operated_time = h.operated_time,
      d.operated_by = h.operated_by,
      d.operated_by_name = h.operated_by_name
    where d.verify_status &lt;&gt; 1
    and (case when h.verify_status = 1 then d.third_party_verify_status else 1 end) = 1
    and (case when h.verify_status = 1 then d.order_complete_status else 1 end) = 1
    and h.verify_code = #{verifyCode}
    and d.id in
    <foreach collection="ids" index="index" item="item" open="(" separator="," close=")">#{item}</foreach>
  </update>

</mapper>